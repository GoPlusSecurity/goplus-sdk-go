// Code generated by go-swagger; DO NOT EDIT.

package token_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/GoPlusSecurity/goplus-sdk-go/pkg/gen/models"
)

// NewGetAccessTokenUsingPOSTParams creates a new GetAccessTokenUsingPOSTParams object
// with the default values initialized.
func NewGetAccessTokenUsingPOSTParams() *GetAccessTokenUsingPOSTParams {
	var ()
	return &GetAccessTokenUsingPOSTParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetAccessTokenUsingPOSTParamsWithTimeout creates a new GetAccessTokenUsingPOSTParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetAccessTokenUsingPOSTParamsWithTimeout(timeout time.Duration) *GetAccessTokenUsingPOSTParams {
	var ()
	return &GetAccessTokenUsingPOSTParams{

		timeout: timeout,
	}
}

// NewGetAccessTokenUsingPOSTParamsWithContext creates a new GetAccessTokenUsingPOSTParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetAccessTokenUsingPOSTParamsWithContext(ctx context.Context) *GetAccessTokenUsingPOSTParams {
	var ()
	return &GetAccessTokenUsingPOSTParams{

		Context: ctx,
	}
}

// NewGetAccessTokenUsingPOSTParamsWithHTTPClient creates a new GetAccessTokenUsingPOSTParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetAccessTokenUsingPOSTParamsWithHTTPClient(client *http.Client) *GetAccessTokenUsingPOSTParams {
	var ()
	return &GetAccessTokenUsingPOSTParams{
		HTTPClient: client,
	}
}

/*
GetAccessTokenUsingPOSTParams contains all the parameters to send to the API endpoint
for the get access token using p o s t operation typically these are written to a http.Request
*/
type GetAccessTokenUsingPOSTParams struct {

	/*Request
	  request

	*/
	Request *models.GetAccessTokenRequest

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get access token using p o s t params
func (o *GetAccessTokenUsingPOSTParams) WithTimeout(timeout time.Duration) *GetAccessTokenUsingPOSTParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get access token using p o s t params
func (o *GetAccessTokenUsingPOSTParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get access token using p o s t params
func (o *GetAccessTokenUsingPOSTParams) WithContext(ctx context.Context) *GetAccessTokenUsingPOSTParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get access token using p o s t params
func (o *GetAccessTokenUsingPOSTParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get access token using p o s t params
func (o *GetAccessTokenUsingPOSTParams) WithHTTPClient(client *http.Client) *GetAccessTokenUsingPOSTParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get access token using p o s t params
func (o *GetAccessTokenUsingPOSTParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithRequest adds the request to the get access token using p o s t params
func (o *GetAccessTokenUsingPOSTParams) WithRequest(request *models.GetAccessTokenRequest) *GetAccessTokenUsingPOSTParams {
	o.SetRequest(request)
	return o
}

// SetRequest adds the request to the get access token using p o s t params
func (o *GetAccessTokenUsingPOSTParams) SetRequest(request *models.GetAccessTokenRequest) {
	o.Request = request
}

// WriteToRequest writes these params to a swagger request
func (o *GetAccessTokenUsingPOSTParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Request != nil {
		if err := r.SetBodyParam(o.Request); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
