// Code generated by go-swagger; DO NOT EDIT.

package goplus_api

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new goplus api API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for goplus api API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	AddressContractUsingGET1(params *AddressContractUsingGET1Params) (*AddressContractUsingGET1OK, error)

	AddressNFT1155ApproveListUsingGET1(params *AddressNFT1155ApproveListUsingGET1Params) (*AddressNFT1155ApproveListUsingGET1OK, error)

	AddressNFT721ApproveListUsingGET1(params *AddressNFT721ApproveListUsingGET1Params) (*AddressNFT721ApproveListUsingGET1OK, error)

	AddressTokenApproveListUsingGET1(params *AddressTokenApproveListUsingGET1Params) (*AddressTokenApproveListUsingGET1OK, error)

	ApprovalContractUsingGET(params *ApprovalContractUsingGETParams) (*ApprovalContractUsingGETOK, error)

	GetAbiDataInfoUsingPOST(params *GetAbiDataInfoUsingPOSTParams) (*GetAbiDataInfoUsingPOSTOK, *GetAbiDataInfoUsingPOSTCreated, error)

	GetChainsListUsingGET(params *GetChainsListUsingGETParams) (*GetChainsListUsingGETOK, error)

	GetDappInfoUsingGET(params *GetDappInfoUsingGETParams) (*GetDappInfoUsingGETOK, error)

	GetDefiInfoUsingGET(params *GetDefiInfoUsingGETParams) (*GetDefiInfoUsingGETOK, error)

	GetNftInfoUsingGET1(params *GetNftInfoUsingGET1Params) (*GetNftInfoUsingGET1OK, error)

	PhishingSiteUsingGET(params *PhishingSiteUsingGETParams) (*PhishingSiteUsingGETOK, error)

	TokenSecurityUsingGET1(params *TokenSecurityUsingGET1Params) (*TokenSecurityUsingGET1OK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
AddressContractUsingGET1 checks if the address is malicious
*/
func (a *Client) AddressContractUsingGET1(params *AddressContractUsingGET1Params) (*AddressContractUsingGET1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddressContractUsingGET1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addressContractUsingGET_1",
		Method:             "GET",
		PathPattern:        "/api/v1/address_security/{address}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddressContractUsingGET1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddressContractUsingGET1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addressContractUsingGET_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AddressNFT1155ApproveListUsingGET1 checks risk of all erc1155 approvals under one e o a
*/
func (a *Client) AddressNFT1155ApproveListUsingGET1(params *AddressNFT1155ApproveListUsingGET1Params) (*AddressNFT1155ApproveListUsingGET1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddressNFT1155ApproveListUsingGET1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addressNFT1155ApproveListUsingGET_1",
		Method:             "GET",
		PathPattern:        "/api/v2/nft1155_approval_security/{chainId}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddressNFT1155ApproveListUsingGET1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddressNFT1155ApproveListUsingGET1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addressNFT1155ApproveListUsingGET_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AddressNFT721ApproveListUsingGET1 checks risk of all erc721 approvals under one e o a
*/
func (a *Client) AddressNFT721ApproveListUsingGET1(params *AddressNFT721ApproveListUsingGET1Params) (*AddressNFT721ApproveListUsingGET1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddressNFT721ApproveListUsingGET1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addressNFT721ApproveListUsingGET_1",
		Method:             "GET",
		PathPattern:        "/api/v2/nft721_approval_security/{chainId}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddressNFT721ApproveListUsingGET1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddressNFT721ApproveListUsingGET1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addressNFT721ApproveListUsingGET_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AddressTokenApproveListUsingGET1 checks risk of all erc20 approvals under one e o a
*/
func (a *Client) AddressTokenApproveListUsingGET1(params *AddressTokenApproveListUsingGET1Params) (*AddressTokenApproveListUsingGET1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddressTokenApproveListUsingGET1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addressTokenApproveListUsingGET_1",
		Method:             "GET",
		PathPattern:        "/api/v2/token_approval_security/{chainId}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddressTokenApproveListUsingGET1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddressTokenApproveListUsingGET1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addressTokenApproveListUsingGET_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ApprovalContractUsingGET checks if the approval is secure
*/
func (a *Client) ApprovalContractUsingGET(params *ApprovalContractUsingGETParams) (*ApprovalContractUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewApprovalContractUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "approvalContractUsingGET",
		Method:             "GET",
		PathPattern:        "/api/v1/approval_security/{chain_id}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ApprovalContractUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ApprovalContractUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for approvalContractUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAbiDataInfoUsingPOST gets abi decode info
*/
func (a *Client) GetAbiDataInfoUsingPOST(params *GetAbiDataInfoUsingPOSTParams) (*GetAbiDataInfoUsingPOSTOK, *GetAbiDataInfoUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAbiDataInfoUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAbiDataInfoUsingPOST",
		Method:             "POST",
		PathPattern:        "/api/v1/abi/input_decode",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAbiDataInfoUsingPOSTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *GetAbiDataInfoUsingPOSTOK:
		return value, nil, nil
	case *GetAbiDataInfoUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for goplus_api: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetChainsListUsingGET gets the list of chains supported by different functions
*/
func (a *Client) GetChainsListUsingGET(params *GetChainsListUsingGETParams) (*GetChainsListUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetChainsListUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getChainsListUsingGET",
		Method:             "GET",
		PathPattern:        "/api/v1/supported_chains",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetChainsListUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetChainsListUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getChainsListUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetDappInfoUsingGET checks risk of dapp through URL
*/
func (a *Client) GetDappInfoUsingGET(params *GetDappInfoUsingGETParams) (*GetDappInfoUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDappInfoUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDappInfoUsingGET",
		Method:             "GET",
		PathPattern:        "/api/v1/dapp_security",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDappInfoUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDappInfoUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDappInfoUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetDefiInfoUsingGET rugs pull detection API beta
*/
func (a *Client) GetDefiInfoUsingGET(params *GetDefiInfoUsingGETParams) (*GetDefiInfoUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDefiInfoUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDefiInfoUsingGET",
		Method:             "GET",
		PathPattern:        "/api/v1/rugpull_detecting/{chain_id}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDefiInfoUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDefiInfoUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDefiInfoUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetNftInfoUsingGET1 gets n f t s security and risk data
*/
func (a *Client) GetNftInfoUsingGET1(params *GetNftInfoUsingGET1Params) (*GetNftInfoUsingGET1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNftInfoUsingGET1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNftInfoUsingGET_1",
		Method:             "GET",
		PathPattern:        "/api/v1/nft_security/{chain_id}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNftInfoUsingGET1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNftInfoUsingGET1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNftInfoUsingGET_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PhishingSiteUsingGET checks if the the url is a phishing site
*/
func (a *Client) PhishingSiteUsingGET(params *PhishingSiteUsingGETParams) (*PhishingSiteUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPhishingSiteUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "phishingSiteUsingGET",
		Method:             "GET",
		PathPattern:        "/api/v1/phishing_site",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PhishingSiteUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PhishingSiteUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for phishingSiteUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
TokenSecurityUsingGET1 gets token s security and risk data
*/
func (a *Client) TokenSecurityUsingGET1(params *TokenSecurityUsingGET1Params) (*TokenSecurityUsingGET1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTokenSecurityUsingGET1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "tokenSecurityUsingGET_1",
		Method:             "GET",
		PathPattern:        "/api/v1/token_security/{chain_id}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TokenSecurityUsingGET1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TokenSecurityUsingGET1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for tokenSecurityUsingGET_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
