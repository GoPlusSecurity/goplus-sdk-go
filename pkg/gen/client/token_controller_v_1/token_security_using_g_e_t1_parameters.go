// Code generated by go-swagger; DO NOT EDIT.

package token_controller_v_1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewTokenSecurityUsingGET1Params creates a new TokenSecurityUsingGET1Params object
// with the default values initialized.
func NewTokenSecurityUsingGET1Params() *TokenSecurityUsingGET1Params {
	var ()
	return &TokenSecurityUsingGET1Params{

		timeout: cr.DefaultTimeout,
	}
}

// NewTokenSecurityUsingGET1ParamsWithTimeout creates a new TokenSecurityUsingGET1Params object
// with the default values initialized, and the ability to set a timeout on a request
func NewTokenSecurityUsingGET1ParamsWithTimeout(timeout time.Duration) *TokenSecurityUsingGET1Params {
	var ()
	return &TokenSecurityUsingGET1Params{

		timeout: timeout,
	}
}

// NewTokenSecurityUsingGET1ParamsWithContext creates a new TokenSecurityUsingGET1Params object
// with the default values initialized, and the ability to set a context for a request
func NewTokenSecurityUsingGET1ParamsWithContext(ctx context.Context) *TokenSecurityUsingGET1Params {
	var ()
	return &TokenSecurityUsingGET1Params{

		Context: ctx,
	}
}

// NewTokenSecurityUsingGET1ParamsWithHTTPClient creates a new TokenSecurityUsingGET1Params object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewTokenSecurityUsingGET1ParamsWithHTTPClient(client *http.Client) *TokenSecurityUsingGET1Params {
	var ()
	return &TokenSecurityUsingGET1Params{
		HTTPClient: client,
	}
}

/*
TokenSecurityUsingGET1Params contains all the parameters to send to the API endpoint
for the token security using g e t 1 operation typically these are written to a http.Request
*/
type TokenSecurityUsingGET1Params struct {

	/*Authorization
	  Authorization (test：Bearer 81|9ihH8JzEuFu4MQ9DjWmH5WrNCPW...)

	*/
	Authorization *string
	/*ChainID
	  The chain_id of the blockchain.
	"1" means Ethereum;
	"10" means Optimism;
	“25” means Cronos;
	"56" means BSC;
	“66” means OKC;
	"100" means Gnosis;
	"128" means HECO;
	"137" means Polygon;
	"250" means Fantom;
	"321" means KCC;
	"324" means zkSync Era;
	"10001" means ETHW;
	"201022" means FON;
	"42161" means Arbitrum;
	"43114" means Avalanche;
	"59140" means Linea;
	"1666600000" means Harmony;
	"tron" means Tron.

	*/
	ChainID string
	/*ContractAddresses
	  The contract address of tokens.

	*/
	ContractAddresses string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the token security using g e t 1 params
func (o *TokenSecurityUsingGET1Params) WithTimeout(timeout time.Duration) *TokenSecurityUsingGET1Params {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the token security using g e t 1 params
func (o *TokenSecurityUsingGET1Params) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the token security using g e t 1 params
func (o *TokenSecurityUsingGET1Params) WithContext(ctx context.Context) *TokenSecurityUsingGET1Params {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the token security using g e t 1 params
func (o *TokenSecurityUsingGET1Params) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the token security using g e t 1 params
func (o *TokenSecurityUsingGET1Params) WithHTTPClient(client *http.Client) *TokenSecurityUsingGET1Params {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the token security using g e t 1 params
func (o *TokenSecurityUsingGET1Params) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAuthorization adds the authorization to the token security using g e t 1 params
func (o *TokenSecurityUsingGET1Params) WithAuthorization(authorization *string) *TokenSecurityUsingGET1Params {
	o.SetAuthorization(authorization)
	return o
}

// SetAuthorization adds the authorization to the token security using g e t 1 params
func (o *TokenSecurityUsingGET1Params) SetAuthorization(authorization *string) {
	o.Authorization = authorization
}

// WithChainID adds the chainID to the token security using g e t 1 params
func (o *TokenSecurityUsingGET1Params) WithChainID(chainID string) *TokenSecurityUsingGET1Params {
	o.SetChainID(chainID)
	return o
}

// SetChainID adds the chainId to the token security using g e t 1 params
func (o *TokenSecurityUsingGET1Params) SetChainID(chainID string) {
	o.ChainID = chainID
}

// WithContractAddresses adds the contractAddresses to the token security using g e t 1 params
func (o *TokenSecurityUsingGET1Params) WithContractAddresses(contractAddresses string) *TokenSecurityUsingGET1Params {
	o.SetContractAddresses(contractAddresses)
	return o
}

// SetContractAddresses adds the contractAddresses to the token security using g e t 1 params
func (o *TokenSecurityUsingGET1Params) SetContractAddresses(contractAddresses string) {
	o.ContractAddresses = contractAddresses
}

// WriteToRequest writes these params to a swagger request
func (o *TokenSecurityUsingGET1Params) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Authorization != nil {

		// header param Authorization
		if err := r.SetHeaderParam("Authorization", *o.Authorization); err != nil {
			return err
		}

	}

	// path param chain_id
	if err := r.SetPathParam("chain_id", o.ChainID); err != nil {
		return err
	}

	// query param contract_addresses
	qrContractAddresses := o.ContractAddresses
	qContractAddresses := qrContractAddresses
	if qContractAddresses != "" {
		if err := r.SetQueryParam("contract_addresses", qContractAddresses); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
