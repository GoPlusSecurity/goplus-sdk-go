// Code generated by go-swagger; DO NOT EDIT.

package nft_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetNftInfoUsingGET1Params creates a new GetNftInfoUsingGET1Params object
// with the default values initialized.
func NewGetNftInfoUsingGET1Params() *GetNftInfoUsingGET1Params {
	var ()
	return &GetNftInfoUsingGET1Params{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetNftInfoUsingGET1ParamsWithTimeout creates a new GetNftInfoUsingGET1Params object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetNftInfoUsingGET1ParamsWithTimeout(timeout time.Duration) *GetNftInfoUsingGET1Params {
	var ()
	return &GetNftInfoUsingGET1Params{

		timeout: timeout,
	}
}

// NewGetNftInfoUsingGET1ParamsWithContext creates a new GetNftInfoUsingGET1Params object
// with the default values initialized, and the ability to set a context for a request
func NewGetNftInfoUsingGET1ParamsWithContext(ctx context.Context) *GetNftInfoUsingGET1Params {
	var ()
	return &GetNftInfoUsingGET1Params{

		Context: ctx,
	}
}

// NewGetNftInfoUsingGET1ParamsWithHTTPClient creates a new GetNftInfoUsingGET1Params object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetNftInfoUsingGET1ParamsWithHTTPClient(client *http.Client) *GetNftInfoUsingGET1Params {
	var ()
	return &GetNftInfoUsingGET1Params{
		HTTPClient: client,
	}
}

/*
GetNftInfoUsingGET1Params contains all the parameters to send to the API endpoint
for the get nft info using g e t 1 operation typically these are written to a http.Request
*/
type GetNftInfoUsingGET1Params struct {

	/*Authorization
	  Authorization (testï¼šBearer 81|9ihH8JzEuFu4MQ9DjWmH5WrNCPW...)

	*/
	Authorization *string
	/*ChainID
	  Chain id, (eth: 1, bsc: 56, Polygon: 137, Avalanche: 43114)

	*/
	ChainID string
	/*ContractAddresses
	  NFT contract address

	*/
	ContractAddresses string
	/*TokenID
	  tokenId

	*/
	TokenID *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get nft info using g e t 1 params
func (o *GetNftInfoUsingGET1Params) WithTimeout(timeout time.Duration) *GetNftInfoUsingGET1Params {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get nft info using g e t 1 params
func (o *GetNftInfoUsingGET1Params) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get nft info using g e t 1 params
func (o *GetNftInfoUsingGET1Params) WithContext(ctx context.Context) *GetNftInfoUsingGET1Params {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get nft info using g e t 1 params
func (o *GetNftInfoUsingGET1Params) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get nft info using g e t 1 params
func (o *GetNftInfoUsingGET1Params) WithHTTPClient(client *http.Client) *GetNftInfoUsingGET1Params {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get nft info using g e t 1 params
func (o *GetNftInfoUsingGET1Params) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAuthorization adds the authorization to the get nft info using g e t 1 params
func (o *GetNftInfoUsingGET1Params) WithAuthorization(authorization *string) *GetNftInfoUsingGET1Params {
	o.SetAuthorization(authorization)
	return o
}

// SetAuthorization adds the authorization to the get nft info using g e t 1 params
func (o *GetNftInfoUsingGET1Params) SetAuthorization(authorization *string) {
	o.Authorization = authorization
}

// WithChainID adds the chainID to the get nft info using g e t 1 params
func (o *GetNftInfoUsingGET1Params) WithChainID(chainID string) *GetNftInfoUsingGET1Params {
	o.SetChainID(chainID)
	return o
}

// SetChainID adds the chainId to the get nft info using g e t 1 params
func (o *GetNftInfoUsingGET1Params) SetChainID(chainID string) {
	o.ChainID = chainID
}

// WithContractAddresses adds the contractAddresses to the get nft info using g e t 1 params
func (o *GetNftInfoUsingGET1Params) WithContractAddresses(contractAddresses string) *GetNftInfoUsingGET1Params {
	o.SetContractAddresses(contractAddresses)
	return o
}

// SetContractAddresses adds the contractAddresses to the get nft info using g e t 1 params
func (o *GetNftInfoUsingGET1Params) SetContractAddresses(contractAddresses string) {
	o.ContractAddresses = contractAddresses
}

// WithTokenID adds the tokenID to the get nft info using g e t 1 params
func (o *GetNftInfoUsingGET1Params) WithTokenID(tokenID *string) *GetNftInfoUsingGET1Params {
	o.SetTokenID(tokenID)
	return o
}

// SetTokenID adds the tokenId to the get nft info using g e t 1 params
func (o *GetNftInfoUsingGET1Params) SetTokenID(tokenID *string) {
	o.TokenID = tokenID
}

// WriteToRequest writes these params to a swagger request
func (o *GetNftInfoUsingGET1Params) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Authorization != nil {

		// header param Authorization
		if err := r.SetHeaderParam("Authorization", *o.Authorization); err != nil {
			return err
		}

	}

	// path param chain_id
	if err := r.SetPathParam("chain_id", o.ChainID); err != nil {
		return err
	}

	// query param contract_addresses
	qrContractAddresses := o.ContractAddresses
	qContractAddresses := qrContractAddresses
	if qContractAddresses != "" {
		if err := r.SetQueryParam("contract_addresses", qContractAddresses); err != nil {
			return err
		}
	}

	if o.TokenID != nil {

		// query param token_id
		var qrTokenID string
		if o.TokenID != nil {
			qrTokenID = *o.TokenID
		}
		qTokenID := qrTokenID
		if qTokenID != "" {
			if err := r.SetQueryParam("token_id", qTokenID); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
