// Code generated by go-swagger; DO NOT EDIT.

package lock_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/GoPlusSecurity/goplus-sdk-go/pkg/gen/models"
)

// GetTokenLockersUsingGETReader is a Reader for the GetTokenLockersUsingGET structure.
type GetTokenLockersUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetTokenLockersUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetTokenLockersUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetTokenLockersUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetTokenLockersUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetTokenLockersUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetTokenLockersUsingGETOK creates a GetTokenLockersUsingGETOK with default headers values
func NewGetTokenLockersUsingGETOK() *GetTokenLockersUsingGETOK {
	return &GetTokenLockersUsingGETOK{}
}

/*
GetTokenLockersUsingGETOK handles this case with default header values.

OK
*/
type GetTokenLockersUsingGETOK struct {
	Payload *models.ResponseWrapperTokenLockerResponse
}

func (o *GetTokenLockersUsingGETOK) Error() string {
	return fmt.Sprintf("[GET /open/api/v1/locks/token][%d] getTokenLockersUsingGETOK  %+v", 200, o.Payload)
}

func (o *GetTokenLockersUsingGETOK) GetPayload() *models.ResponseWrapperTokenLockerResponse {
	return o.Payload
}

func (o *GetTokenLockersUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseWrapperTokenLockerResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTokenLockersUsingGETUnauthorized creates a GetTokenLockersUsingGETUnauthorized with default headers values
func NewGetTokenLockersUsingGETUnauthorized() *GetTokenLockersUsingGETUnauthorized {
	return &GetTokenLockersUsingGETUnauthorized{}
}

/*
GetTokenLockersUsingGETUnauthorized handles this case with default header values.

Unauthorized
*/
type GetTokenLockersUsingGETUnauthorized struct {
}

func (o *GetTokenLockersUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /open/api/v1/locks/token][%d] getTokenLockersUsingGETUnauthorized ", 401)
}

func (o *GetTokenLockersUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetTokenLockersUsingGETForbidden creates a GetTokenLockersUsingGETForbidden with default headers values
func NewGetTokenLockersUsingGETForbidden() *GetTokenLockersUsingGETForbidden {
	return &GetTokenLockersUsingGETForbidden{}
}

/*
GetTokenLockersUsingGETForbidden handles this case with default header values.

Forbidden
*/
type GetTokenLockersUsingGETForbidden struct {
}

func (o *GetTokenLockersUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /open/api/v1/locks/token][%d] getTokenLockersUsingGETForbidden ", 403)
}

func (o *GetTokenLockersUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetTokenLockersUsingGETNotFound creates a GetTokenLockersUsingGETNotFound with default headers values
func NewGetTokenLockersUsingGETNotFound() *GetTokenLockersUsingGETNotFound {
	return &GetTokenLockersUsingGETNotFound{}
}

/*
GetTokenLockersUsingGETNotFound handles this case with default header values.

Not Found
*/
type GetTokenLockersUsingGETNotFound struct {
}

func (o *GetTokenLockersUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /open/api/v1/locks/token][%d] getTokenLockersUsingGETNotFound ", 404)
}

func (o *GetTokenLockersUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
