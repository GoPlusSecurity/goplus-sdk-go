// Code generated by go-swagger; DO NOT EDIT.

package lock_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetTokenLockersUsingGETParams creates a new GetTokenLockersUsingGETParams object
// with the default values initialized.
func NewGetTokenLockersUsingGETParams() *GetTokenLockersUsingGETParams {
	var (
		chainIDDefault      = string("8453")
		pageNumDefault      = int32(1)
		pageSizeDefault     = int32(100)
		tokenAddressDefault = string("0x6fd0303649296360f10c07b24521deda9223086d")
	)
	return &GetTokenLockersUsingGETParams{
		ChainID:      chainIDDefault,
		PageNum:      pageNumDefault,
		PageSize:     pageSizeDefault,
		TokenAddress: tokenAddressDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewGetTokenLockersUsingGETParamsWithTimeout creates a new GetTokenLockersUsingGETParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetTokenLockersUsingGETParamsWithTimeout(timeout time.Duration) *GetTokenLockersUsingGETParams {
	var (
		chainIDDefault      = string("8453")
		pageNumDefault      = int32(1)
		pageSizeDefault     = int32(100)
		tokenAddressDefault = string("0x6fd0303649296360f10c07b24521deda9223086d")
	)
	return &GetTokenLockersUsingGETParams{
		ChainID:      chainIDDefault,
		PageNum:      pageNumDefault,
		PageSize:     pageSizeDefault,
		TokenAddress: tokenAddressDefault,

		timeout: timeout,
	}
}

// NewGetTokenLockersUsingGETParamsWithContext creates a new GetTokenLockersUsingGETParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetTokenLockersUsingGETParamsWithContext(ctx context.Context) *GetTokenLockersUsingGETParams {
	var (
		chainIdDefault      = string("8453")
		pageNumDefault      = int32(1)
		pageSizeDefault     = int32(100)
		tokenAddressDefault = string("0x6fd0303649296360f10c07b24521deda9223086d")
	)
	return &GetTokenLockersUsingGETParams{
		ChainID:      chainIdDefault,
		PageNum:      pageNumDefault,
		PageSize:     pageSizeDefault,
		TokenAddress: tokenAddressDefault,

		Context: ctx,
	}
}

// NewGetTokenLockersUsingGETParamsWithHTTPClient creates a new GetTokenLockersUsingGETParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetTokenLockersUsingGETParamsWithHTTPClient(client *http.Client) *GetTokenLockersUsingGETParams {
	var (
		chainIdDefault      = string("8453")
		pageNumDefault      = int32(1)
		pageSizeDefault     = int32(100)
		tokenAddressDefault = string("0x6fd0303649296360f10c07b24521deda9223086d")
	)
	return &GetTokenLockersUsingGETParams{
		ChainID:      chainIdDefault,
		PageNum:      pageNumDefault,
		PageSize:     pageSizeDefault,
		TokenAddress: tokenAddressDefault,
		HTTPClient:   client,
	}
}

/*
GetTokenLockersUsingGETParams contains all the parameters to send to the API endpoint
for the get token lockers using g e t operation typically these are written to a http.Request
*/
type GetTokenLockersUsingGETParams struct {

	/*Authorization
	  Authorization token in the format: Bearer <token> (e.g., Bearer eyJsZXZlbCI6NSwiYXBwTmFtZSI6ImF2cyIsImFwcEtleSI6IjFaW...)

	*/
	Authorization *string
	/*ChainID
	  chainId

	*/
	ChainID string
	/*PageNum
	  pageNum

	*/
	PageNum int32
	/*PageSize
	  pageSize

	*/
	PageSize int32
	/*TokenAddress
	  tokenAddress

	*/
	TokenAddress string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get token lockers using g e t params
func (o *GetTokenLockersUsingGETParams) WithTimeout(timeout time.Duration) *GetTokenLockersUsingGETParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get token lockers using g e t params
func (o *GetTokenLockersUsingGETParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get token lockers using g e t params
func (o *GetTokenLockersUsingGETParams) WithContext(ctx context.Context) *GetTokenLockersUsingGETParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get token lockers using g e t params
func (o *GetTokenLockersUsingGETParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get token lockers using g e t params
func (o *GetTokenLockersUsingGETParams) WithHTTPClient(client *http.Client) *GetTokenLockersUsingGETParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get token lockers using g e t params
func (o *GetTokenLockersUsingGETParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAuthorization adds the authorization to the get token lockers using g e t params
func (o *GetTokenLockersUsingGETParams) WithAuthorization(authorization *string) *GetTokenLockersUsingGETParams {
	o.SetAuthorization(authorization)
	return o
}

// SetAuthorization adds the authorization to the get token lockers using g e t params
func (o *GetTokenLockersUsingGETParams) SetAuthorization(authorization *string) {
	o.Authorization = authorization
}

// WithChainID adds the chainID to the get token lockers using g e t params
func (o *GetTokenLockersUsingGETParams) WithChainID(chainID string) *GetTokenLockersUsingGETParams {
	o.SetChainID(chainID)
	return o
}

// SetChainID adds the chainId to the get token lockers using g e t params
func (o *GetTokenLockersUsingGETParams) SetChainID(chainID string) {
	o.ChainID = chainID
}

// WithPageNum adds the pageNum to the get token lockers using g e t params
func (o *GetTokenLockersUsingGETParams) WithPageNum(pageNum int32) *GetTokenLockersUsingGETParams {
	o.SetPageNum(pageNum)
	return o
}

// SetPageNum adds the pageNum to the get token lockers using g e t params
func (o *GetTokenLockersUsingGETParams) SetPageNum(pageNum int32) {
	o.PageNum = pageNum
}

// WithPageSize adds the pageSize to the get token lockers using g e t params
func (o *GetTokenLockersUsingGETParams) WithPageSize(pageSize int32) *GetTokenLockersUsingGETParams {
	o.SetPageSize(pageSize)
	return o
}

// SetPageSize adds the pageSize to the get token lockers using g e t params
func (o *GetTokenLockersUsingGETParams) SetPageSize(pageSize int32) {
	o.PageSize = pageSize
}

// WithTokenAddress adds the tokenAddress to the get token lockers using g e t params
func (o *GetTokenLockersUsingGETParams) WithTokenAddress(tokenAddress string) *GetTokenLockersUsingGETParams {
	o.SetTokenAddress(tokenAddress)
	return o
}

// SetTokenAddress adds the tokenAddress to the get token lockers using g e t params
func (o *GetTokenLockersUsingGETParams) SetTokenAddress(tokenAddress string) {
	o.TokenAddress = tokenAddress
}

// WriteToRequest writes these params to a swagger request
func (o *GetTokenLockersUsingGETParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Authorization != nil {

		// header param Authorization
		if err := r.SetHeaderParam("Authorization", *o.Authorization); err != nil {
			return err
		}

	}

	// query param chainId
	qrChainID := o.ChainID
	qChainID := qrChainID
	if qChainID != "" {
		if err := r.SetQueryParam("chainId", qChainID); err != nil {
			return err
		}
	}

	// query param pageNum
	qrPageNum := o.PageNum
	qPageNum := swag.FormatInt32(qrPageNum)
	if qPageNum != "" {
		if err := r.SetQueryParam("pageNum", qPageNum); err != nil {
			return err
		}
	}

	// query param pageSize
	qrPageSize := o.PageSize
	qPageSize := swag.FormatInt32(qrPageSize)
	if qPageSize != "" {
		if err := r.SetQueryParam("pageSize", qPageSize); err != nil {
			return err
		}
	}

	// query param tokenAddress
	qrTokenAddress := o.TokenAddress
	qTokenAddress := qrTokenAddress
	if qTokenAddress != "" {
		if err := r.SetQueryParam("tokenAddress", qTokenAddress); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
