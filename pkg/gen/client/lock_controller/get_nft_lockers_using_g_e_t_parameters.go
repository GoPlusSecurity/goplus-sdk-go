// Code generated by go-swagger; DO NOT EDIT.

package lock_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetNftLockersUsingGETParams creates a new GetNftLockersUsingGETParams object
// with the default values initialized.
func NewGetNftLockersUsingGETParams() *GetNftLockersUsingGETParams {
	var (
		chainIDDefault     = string("56")
		pageNumDefault     = int32(1)
		pageSizeDefault    = int32(100)
		poolAddressDefault = string("0x579df956c6cE6178fBBD78bbE4f05786cFBA9B76")
	)
	return &GetNftLockersUsingGETParams{
		ChainID:     chainIDDefault,
		PageNum:     pageNumDefault,
		PageSize:    pageSizeDefault,
		PoolAddress: poolAddressDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewGetNftLockersUsingGETParamsWithTimeout creates a new GetNftLockersUsingGETParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetNftLockersUsingGETParamsWithTimeout(timeout time.Duration) *GetNftLockersUsingGETParams {
	var (
		chainIDDefault     = string("56")
		pageNumDefault     = int32(1)
		pageSizeDefault    = int32(100)
		poolAddressDefault = string("0x579df956c6cE6178fBBD78bbE4f05786cFBA9B76")
	)
	return &GetNftLockersUsingGETParams{
		ChainID:     chainIDDefault,
		PageNum:     pageNumDefault,
		PageSize:    pageSizeDefault,
		PoolAddress: poolAddressDefault,

		timeout: timeout,
	}
}

// NewGetNftLockersUsingGETParamsWithContext creates a new GetNftLockersUsingGETParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetNftLockersUsingGETParamsWithContext(ctx context.Context) *GetNftLockersUsingGETParams {
	var (
		chainIdDefault     = string("56")
		pageNumDefault     = int32(1)
		pageSizeDefault    = int32(100)
		poolAddressDefault = string("0x579df956c6cE6178fBBD78bbE4f05786cFBA9B76")
	)
	return &GetNftLockersUsingGETParams{
		ChainID:     chainIdDefault,
		PageNum:     pageNumDefault,
		PageSize:    pageSizeDefault,
		PoolAddress: poolAddressDefault,

		Context: ctx,
	}
}

// NewGetNftLockersUsingGETParamsWithHTTPClient creates a new GetNftLockersUsingGETParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetNftLockersUsingGETParamsWithHTTPClient(client *http.Client) *GetNftLockersUsingGETParams {
	var (
		chainIdDefault     = string("56")
		pageNumDefault     = int32(1)
		pageSizeDefault    = int32(100)
		poolAddressDefault = string("0x579df956c6cE6178fBBD78bbE4f05786cFBA9B76")
	)
	return &GetNftLockersUsingGETParams{
		ChainID:     chainIdDefault,
		PageNum:     pageNumDefault,
		PageSize:    pageSizeDefault,
		PoolAddress: poolAddressDefault,
		HTTPClient:  client,
	}
}

/*
GetNftLockersUsingGETParams contains all the parameters to send to the API endpoint
for the get nft lockers using g e t operation typically these are written to a http.Request
*/
type GetNftLockersUsingGETParams struct {

	/*Authorization
	  Authorization token in the format: Bearer <token> (e.g., Bearer eyJsZXZlbCI6NSwiYXBwTmFtZSI6ImF2cyIsImFwcEtleSI6IjFaW...)

	*/
	Authorization *string
	/*ChainID
	  chainId

	*/
	ChainID string
	/*PageNum
	  pageNum

	*/
	PageNum int32
	/*PageSize
	  pageSize

	*/
	PageSize int32
	/*PoolAddress
	  poolAddress

	*/
	PoolAddress string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get nft lockers using g e t params
func (o *GetNftLockersUsingGETParams) WithTimeout(timeout time.Duration) *GetNftLockersUsingGETParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get nft lockers using g e t params
func (o *GetNftLockersUsingGETParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get nft lockers using g e t params
func (o *GetNftLockersUsingGETParams) WithContext(ctx context.Context) *GetNftLockersUsingGETParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get nft lockers using g e t params
func (o *GetNftLockersUsingGETParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get nft lockers using g e t params
func (o *GetNftLockersUsingGETParams) WithHTTPClient(client *http.Client) *GetNftLockersUsingGETParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get nft lockers using g e t params
func (o *GetNftLockersUsingGETParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAuthorization adds the authorization to the get nft lockers using g e t params
func (o *GetNftLockersUsingGETParams) WithAuthorization(authorization *string) *GetNftLockersUsingGETParams {
	o.SetAuthorization(authorization)
	return o
}

// SetAuthorization adds the authorization to the get nft lockers using g e t params
func (o *GetNftLockersUsingGETParams) SetAuthorization(authorization *string) {
	o.Authorization = authorization
}

// WithChainID adds the chainID to the get nft lockers using g e t params
func (o *GetNftLockersUsingGETParams) WithChainID(chainID string) *GetNftLockersUsingGETParams {
	o.SetChainID(chainID)
	return o
}

// SetChainID adds the chainId to the get nft lockers using g e t params
func (o *GetNftLockersUsingGETParams) SetChainID(chainID string) {
	o.ChainID = chainID
}

// WithPageNum adds the pageNum to the get nft lockers using g e t params
func (o *GetNftLockersUsingGETParams) WithPageNum(pageNum int32) *GetNftLockersUsingGETParams {
	o.SetPageNum(pageNum)
	return o
}

// SetPageNum adds the pageNum to the get nft lockers using g e t params
func (o *GetNftLockersUsingGETParams) SetPageNum(pageNum int32) {
	o.PageNum = pageNum
}

// WithPageSize adds the pageSize to the get nft lockers using g e t params
func (o *GetNftLockersUsingGETParams) WithPageSize(pageSize int32) *GetNftLockersUsingGETParams {
	o.SetPageSize(pageSize)
	return o
}

// SetPageSize adds the pageSize to the get nft lockers using g e t params
func (o *GetNftLockersUsingGETParams) SetPageSize(pageSize int32) {
	o.PageSize = pageSize
}

// WithPoolAddress adds the poolAddress to the get nft lockers using g e t params
func (o *GetNftLockersUsingGETParams) WithPoolAddress(poolAddress string) *GetNftLockersUsingGETParams {
	o.SetPoolAddress(poolAddress)
	return o
}

// SetPoolAddress adds the poolAddress to the get nft lockers using g e t params
func (o *GetNftLockersUsingGETParams) SetPoolAddress(poolAddress string) {
	o.PoolAddress = poolAddress
}

// WriteToRequest writes these params to a swagger request
func (o *GetNftLockersUsingGETParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Authorization != nil {

		// header param Authorization
		if err := r.SetHeaderParam("Authorization", *o.Authorization); err != nil {
			return err
		}

	}

	// query param chainId
	qrChainID := o.ChainID
	qChainID := qrChainID
	if qChainID != "" {
		if err := r.SetQueryParam("chainId", qChainID); err != nil {
			return err
		}
	}

	// query param pageNum
	qrPageNum := o.PageNum
	qPageNum := swag.FormatInt32(qrPageNum)
	if qPageNum != "" {
		if err := r.SetQueryParam("pageNum", qPageNum); err != nil {
			return err
		}
	}

	// query param pageSize
	qrPageSize := o.PageSize
	qPageSize := swag.FormatInt32(qrPageSize)
	if qPageSize != "" {
		if err := r.SetQueryParam("pageSize", qPageSize); err != nil {
			return err
		}
	}

	// query param poolAddress
	qrPoolAddress := o.PoolAddress
	qPoolAddress := qrPoolAddress
	if qPoolAddress != "" {
		if err := r.SetQueryParam("poolAddress", qPoolAddress); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
