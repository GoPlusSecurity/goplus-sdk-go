// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ParseAbiDataRequest ParseAbiDataRequest
//
// swagger:model ParseAbiDataRequest
type ParseAbiDataRequest struct {

	// Chain id, (ETH: 1, Cronos:25, BSC: 56, Heco: 128, Polygon: 137, Fantom:250, KCC: 321, Arbitrum: 42161, Avalanche: 43114)
	// Required: true
	ChainID *string `json:"chain_id"`

	// Carrying the signer and contract address will help to decode more information.
	ContractAddress string `json:"contract_address,omitempty"`

	// Transaction input
	// Required: true
	Data *string `json:"data"`

	// input info
	Input map[string]interface{} `json:"input,omitempty"`

	// Carrying the signer and contract address will help to decode more information.
	Signer string `json:"signer,omitempty"`

	// Transaction type
	// Enum: [common eth_signTypedData_v4 personal_sign eth_sign]
	TranscationType string `json:"transcation_type,omitempty"`
}

// Validate validates this parse abi data request
func (m *ParseAbiDataRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateChainID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTranscationType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ParseAbiDataRequest) validateChainID(formats strfmt.Registry) error {

	if err := validate.Required("chain_id", "body", m.ChainID); err != nil {
		return err
	}

	return nil
}

func (m *ParseAbiDataRequest) validateData(formats strfmt.Registry) error {

	if err := validate.Required("data", "body", m.Data); err != nil {
		return err
	}

	return nil
}

var parseAbiDataRequestTypeTranscationTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["common","eth_signTypedData_v4","personal_sign","eth_sign"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		parseAbiDataRequestTypeTranscationTypePropEnum = append(parseAbiDataRequestTypeTranscationTypePropEnum, v)
	}
}

const (

	// ParseAbiDataRequestTranscationTypeCommon captures enum value "common"
	ParseAbiDataRequestTranscationTypeCommon string = "common"

	// ParseAbiDataRequestTranscationTypeEthSignTypedDataV4 captures enum value "eth_signTypedData_v4"
	ParseAbiDataRequestTranscationTypeEthSignTypedDataV4 string = "eth_signTypedData_v4"

	// ParseAbiDataRequestTranscationTypePersonalSign captures enum value "personal_sign"
	ParseAbiDataRequestTranscationTypePersonalSign string = "personal_sign"

	// ParseAbiDataRequestTranscationTypeEthSign captures enum value "eth_sign"
	ParseAbiDataRequestTranscationTypeEthSign string = "eth_sign"
)

// prop value enum
func (m *ParseAbiDataRequest) validateTranscationTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, parseAbiDataRequestTypeTranscationTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ParseAbiDataRequest) validateTranscationType(formats strfmt.Registry) error {

	if swag.IsZero(m.TranscationType) { // not required
		return nil
	}

	// value enum
	if err := m.validateTranscationTypeEnum("transcation_type", "body", m.TranscationType); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ParseAbiDataRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ParseAbiDataRequest) UnmarshalBinary(b []byte) error {
	var res ParseAbiDataRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
