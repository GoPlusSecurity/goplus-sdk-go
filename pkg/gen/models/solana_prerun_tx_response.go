// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SolanaPrerunTxResponse SolanaPrerunTxResponse
//
// swagger:model SolanaPrerunTxResponse
type SolanaPrerunTxResponse struct {

	// allowance upgrades
	AllowanceUpgrades []*SolanaAllowanceUpgrade `json:"allowance_upgrades"`

	// asset changes
	AssetChanges *SolanaTxAssetChanges `json:"asset_changes,omitempty"`

	// error
	Error string `json:"error,omitempty"`

	// input
	Input string `json:"input,omitempty"`

	// logs
	Logs []string `json:"logs"`

	// ownership changes
	OwnershipChanges []*SolanaOwnershipChange `json:"ownership_changes"`

	// risk detail
	RiskDetail []string `json:"risk_detail"`

	// risk type
	RiskType []int32 `json:"risk_type"`

	// risky txn
	RiskyTxn string `json:"risky_txn,omitempty"`

	// sender
	Sender string `json:"sender,omitempty"`

	// slot height
	SlotHeight int64 `json:"slot_height,omitempty"`

	// transaction fee
	TransactionFee string `json:"transaction_fee,omitempty"`
}

// Validate validates this solana prerun tx response
func (m *SolanaPrerunTxResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAllowanceUpgrades(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAssetChanges(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOwnershipChanges(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SolanaPrerunTxResponse) validateAllowanceUpgrades(formats strfmt.Registry) error {

	if swag.IsZero(m.AllowanceUpgrades) { // not required
		return nil
	}

	for i := 0; i < len(m.AllowanceUpgrades); i++ {
		if swag.IsZero(m.AllowanceUpgrades[i]) { // not required
			continue
		}

		if m.AllowanceUpgrades[i] != nil {
			if err := m.AllowanceUpgrades[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("allowance_upgrades" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SolanaPrerunTxResponse) validateAssetChanges(formats strfmt.Registry) error {

	if swag.IsZero(m.AssetChanges) { // not required
		return nil
	}

	if m.AssetChanges != nil {
		if err := m.AssetChanges.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("asset_changes")
			}
			return err
		}
	}

	return nil
}

func (m *SolanaPrerunTxResponse) validateOwnershipChanges(formats strfmt.Registry) error {

	if swag.IsZero(m.OwnershipChanges) { // not required
		return nil
	}

	for i := 0; i < len(m.OwnershipChanges); i++ {
		if swag.IsZero(m.OwnershipChanges[i]) { // not required
			continue
		}

		if m.OwnershipChanges[i] != nil {
			if err := m.OwnershipChanges[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ownership_changes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *SolanaPrerunTxResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SolanaPrerunTxResponse) UnmarshalBinary(b []byte) error {
	var res SolanaPrerunTxResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
